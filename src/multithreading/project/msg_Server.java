
package multithreading.project;

//imports
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.*;
import java.net.*;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;


/**
 * Created by Calum Bruton 
 * The message Server is the GUI for the chat room application
 */
public class msg_Server extends javax.swing.JFrame {

    //This hashmap stores the username-socket pairs of clients
    static HashMap clients_map = new HashMap(); 
    
    //Colors used
    Color prim_col = Color.decode("0x63f27b");
    Color back_col = Color.decode("0xeaf7f9");
    
    public msg_Server() {
        initComponents();
        
        //Manual changes to swing components
        this.setTitle("Server");
        this.getContentPane().setBackground(back_col);
        recipient_label.setForeground(Color.decode("0x76767a"));
        client_list.setSelectionBackground(prim_col);
        
        msg_input.setBorder(new EmptyBorder(5,15,5,5));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_input = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        client_list = new javax.swing.JList<>();
        recipient_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        msg_area.setColumns(20);
        msg_area.setFont(new java.awt.Font("Roboto", 0, 13)); // NOI18N
        msg_area.setForeground(new java.awt.Color(51, 51, 51));
        msg_area.setRows(5);
        msg_area.setFocusable(false);
        msg_area.setSelectionColor(new java.awt.Color(204, 153, 0));
        jScrollPane1.setViewportView(msg_area);

        msg_input.setFont(new java.awt.Font("Roboto", 0, 13)); // NOI18N
        msg_input.setForeground(new java.awt.Color(51, 51, 51));
        msg_input.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        msg_input.setSelectionColor(new java.awt.Color(255, 153, 0));
        msg_input.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                msg_inputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                msg_inputFocusLost(evt);
            }
        });
        msg_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                msg_inputKeyPressed(evt);
            }
        });

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        DefaultListModel model = new DefaultListModel();
        client_list.setModel(model);
        client_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        client_list.setToolTipText("");
        client_list.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        client_list.setSelectionBackground(new java.awt.Color(255, 178, 84));
        jScrollPane3.setViewportView(client_list);

        recipient_label.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        recipient_label.setForeground(new java.awt.Color(255, 153, 0));
        recipient_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recipient_label.setText("Choose Your Recipient");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(msg_input))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recipient_label, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(msg_send, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(recipient_label, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msg_input)
                    .addComponent(msg_send, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //Action performed when the send button is pressed
    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        //Find the currently selected Client in the client list and send a message to that client
        String recipient = client_list.getSelectedValue();
        Socket cli_socket = (Socket) clients_map.get(recipient);
        try {
            PrintStream p = new PrintStream(cli_socket.getOutputStream());
            String msg = msg_input.getText();
            p.println(msg);
            
            //Reset the input field
            msg_input.setText("");
        }              
        catch (IOException ex) {
            Logger.getLogger(msg_Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_msg_sendActionPerformed

    //When the message input area is focussed
    private void msg_inputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_msg_inputFocusGained
        Border border = BorderFactory.createLineBorder(prim_col);
        msg_input.setBorder(BorderFactory.createCompoundBorder(border, 
            BorderFactory.createEmptyBorder(5, 15, 5, 5)));
    }//GEN-LAST:event_msg_inputFocusGained

    //When the message input area losses focus
    private void msg_inputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_msg_inputFocusLost
        msg_input.setBorder(new EmptyBorder(5,15,5,5));
    }//GEN-LAST:event_msg_inputFocusLost

    private void msg_inputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_msg_inputKeyPressed
        //If the key is enter then send the message to the server
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            //Find the currently selected Client in the client list and send a message to that client
            String recipient = client_list.getSelectedValue();
            Socket cli_socket = (Socket) clients_map.get(recipient);
            try {
                PrintStream p = new PrintStream(cli_socket.getOutputStream());
                String msg = msg_input.getText();
                p.println(msg);

                //Reset the input field
                msg_input.setText("");
            }              
            catch (IOException ex) {
                Logger.getLogger(msg_Server.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_msg_inputKeyPressed


    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(msg_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(msg_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(msg_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(msg_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                msg_Server msg_svr = new msg_Server();
                msg_svr.setVisible(true);
            }
        });
        //Try to open a server socket on port 9999
        //Note that you cannot choose a port less than 1023 if you are not a privledged user
        ServerSocket MyServer = null;
        int num_threads = 0; //initialize a thread counter
        try{
            MyServer = new ServerSocket(9999);
        }
        catch (IOException e) {
            System.out.println(e);
        }  
        
        //Succesfully created server socket. Now wait for connections
        while (num_threads <= 10){
            try{
                //The accept method waits until it receives a connection from a client
                Socket clientSocket = MyServer.accept();
                System.out.println("Thread " + (num_threads+1) + " started on: " + clientSocket);
                String cli_name = "Client " + (num_threads+1);
                
                //Add the client name and socket to the clients map
                clients_map.put(cli_name, clientSocket);
                
                //Add client name to the client_list to select on the server
                DefaultListModel model = (DefaultListModel)client_list.getModel();
                model.addElement(cli_name);

                //For each client, we will start a thread to service their requests
                ClientThread cliThread = new ClientThread(cli_name, clientSocket);
                cliThread.start();
                
            }
            
            catch (IOException e) {
               System.out.println(e);
            }  
            //Increase the count of threads being serviced
            num_threads += 1;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JList<String> client_list;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    protected static javax.swing.JTextArea msg_area;
    private javax.swing.JTextField msg_input;
    private javax.swing.JButton msg_send;
    private javax.swing.JLabel recipient_label;
    // End of variables declaration//GEN-END:variables
}//End of message server class

